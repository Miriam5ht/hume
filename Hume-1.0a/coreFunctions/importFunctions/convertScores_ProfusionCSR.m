function [scorer id cond outname outfile stageData] = convertScores_ProfusionCSR(file,srate)
% [scorer id cond outname outfile stageData] = convertScores_ProfusionCSR(file,srate)
%  
%   Function to convert sleep stage data from Profusion3 data to a stageData
%   struct for Húmë processing (e.g. a plotSleepStats call)
%
%   This data takes a .rtf 'Events' report generated by profusion using the
%   custom written Events.rtf report template. An associated hypnogram file
%   must be present in the same folder (.txt) containing scored stages.
%   Otherwise this function will error.
%
%   Inputs (Required)
%
%       file (string)   ?  Name of Events .rtf file exported from Profusion
%
%   Inputs (Optional)
%
%       srate ? Sampling rate of the scored data (default: 200 Hz)
%
%   Outputs:
%
%       scorer, id, cond, outname, outfile ? meta-information for saving
%       data.
%
%       stageData ? converted stageData .mat file for Húmë processing
%
%%   Copyright (c) 2015 Jared M. Saletin, PhD and Stephanie M. Greer, PhD
%
%   This file is part of Húmë.
%   
%   Húmë is free software: you can redistribute it and/or modify it
%   under the terms of the GNU General Public License as published by the
%   Free Software Foundation, either version 3 of the License, or (at your
%   option) any later version.
% 
%   Húmë is distributed in the hope that it will be useful, but
%   WITHOUT ANY WARRANTY; without even the implied warranty of
%   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
%   General Public License for more details.
% 
%   You should have received a copy of the GNU General Public License along
%   with Húmë.  If not, see <http://www.gnu.org/licenses/>.
%
%   Húmë is intended for research purposes only. Any commercial or medical
%   use of this software is prohibited. The authors accept no
%   responsibility for its use in this manner.

%% Check inputs

if nargin == 2
    
    savename = file(1:end-6);
    
elseif nargin==1
    
    srate = 200;

elseif nargin==0
    stageData={'UniSA *.RTF','.RTF','convertScores_ProfusionCSR'};
    
    scorer=[];
    id = [];
    cond = [];
    outname = [];
    outfile = [];
    
    return
end

%% META DATA
[path, fileName, fileExt] = fileparts(file);

mkdir([path,'/',fileName]);

if isletter(fileName(3))
        
        scorer = fileName(1:3);
        trimmedName = fileName(4:end);
    else
        scorer = fileName(1:2);
        trimmedName = fileName(3:end);
        
    
end
    
id = trimmedName(1:min(find(isletter(trimmedName)))-2);
cond = trimmedName(min(find(isletter(trimmedName))):end);
    
outname = [path,'/',fileName,'/',fileName];
outfile = fileName;

savename = [outname,'_scores'];

%% CHECK FOR CORRESPONDING HYPNOGRAM FILE

[path, fileName, fileExt] = fileparts(file);
  
if ~exist([path,'/',fileName,'.txt'])
    h = errordlg(sprintf('You are using a UoSA CSR Profusion Event File yet no corresponding Hypnogram File is present.\n\nPlease check your file path, and re-export if neccessary and then try again'),'No CSR Event File');
    error(sprintf('\n\nYou are using a UoSA CSR Profusion Event File yet no corresponding Hypnogram File is present.\n\nPlease check your file path, and re-export if neccessary and then try again'));
else      
    eventFile = file;
    hypFile = [path,'/',fileName,'.txt'];
end

%% PARSE HYPNOGRAM FILE

fid = fopen(hypFile);
data = textscan(fid,'%s');
fclose(fid);

stages=NaN(length(data{1}),1);

% Set Stages from Staged Array

for Ep = 1:length(data{1})
    
    Str = data{1}{Ep};
    
    switch Str
        case '?'
            stages(Ep)=7;
        case 'W'
            stages(Ep)=0;
        case '1'
            stages(Ep)=1;
        case '2'
            stages(Ep)=2;
        case '3'
            stages(Ep)=3;
        case '4'
            stages(Ep)=4;
        case 'R'
            stages(Ep)=5;
        case 'M'
            stages(Ep)=6;
    end         
end

stageData.stages = stages;

%% PARSE EVENT FILE

rtfFile = importdata(file);
startSTR = rtfFile{115};
dateSTR = rtfFile{117};
winSTR = rtfFile{119};
eventSTR = rtfFile{123};

startSTR=textscan(startSTR,'%s %s %s');
recStart=startSTR{3}{1}(1:end-1);

dateSTR=textscan(dateSTR,'%s %s %s');
recDate=dateSTR{3}{1}(1:end-1);

winSTR=textscan(winSTR,'%s %s %s');
winSTR=winSTR{3}{1}(1:end-1);

stageData.recStart = datenum(recStart,'HH:MM:SS'); % PULL FROM HEADER

stageData.win = str2num(winSTR);

stageData.Notes = '';

events = strsplit(eventSTR(1:end-1),'\\par ')';
for e = 1:size(events,1)
    event = strsplit(events{e});
    eventsSep{e,1} = event{1};
    eventsSep{e,2} = event{3};
    
    if length(event)>4
    eventsSep{e,3} = strjoin(event(4:end));
    else
        eventsSep{e,3} = event{4};
    end
end

%% SetUp Events

stageData=eventSetup(stageData,length(stageData.stages));
LUT = eventLUT;
lightsOffFound = 0;
lightsOnFound = 0;

for i = 1:size(eventsSep,1)
    
        % FIND LIGHTS OFF
        if strcmp(eventsSep{i,3},'Lights Off')
            
            if lightsOffFound==1
                 warning('Found Duplicate Lights Off. Last is used, Check Scored File to Confirm');
            end
            
           lightsOffFound = 1;
           epLightsOff = str2num(eventsSep{i,2});
           stageData.lightsOFF = datenum(eventsSep{i,1},'HH:MM:SS');
 
           
         % FIND LIGHTS ON   
         elseif strcmp(eventsSep{i,3},'Lights On')
           if lightsOnFound==1
                 warning('Found Duplicate Lights On. Last Is Used, Check Scored File to Confirm');
           end
            
            lightsOnFound = 1;
            epLightsOn = str2num(eventsSep{i,2});
           stageData.lightsON = datenum(eventsSep{i,1},'HH:MM:SS');
            
        end
              
% FIND OTHER EVENTS


        separated = strsplit(eventsSep{i,3},', ');

        for ev = 1:size(LUT,1);
                    if sum(ismember(separated,LUT{ev,1}))>=1
                        stageData.eventMat(str2num(eventsSep{i,2}),ev)=sum(ismember(separated,LUT{ev,1}));
                    end
        end
end




%Add a day to the time if it looks like lights on happened before the
%record start.
if(~(stageData.recStart < stageData.lightsON))
    stageData.lightsON = stageData.lightsON + 1;
end
%Add a day to the time if it looks like lights off happened before the
%record start.
if(~(stageData.recStart < stageData.lightsOFF))
    stageData.lightsOFF = stageData.lightsOFF + 1;
end

stageData.srate = srate;

stageData.stageTime = (0:(size(stageData.stages, 1) - 1))./(60/stageData.win);

% stageData.onsets

scoredEps = find(stageData.stages ~=7); 
firstScoredEp = scoredEps(1);
lastScoredEp = scoredEps(end);

stageData.onsets = zeros(length(stageData.stages), 1);

for i = firstScoredEp:lastScoredEp
    
    stageData.onsets(i) = ((i-1)*stageData.win*stageData.srate)+1;

end

%% Save

save(savename,'stageData');

end


% %get only the data that is scored
% 
% for i = 1:6
%     inds = find(stages(:, 1) == i);
%     totalTime(i) = sum((onsets(inds)/stageData.srate + stageData.win));
% end
% 
% perTime = totalTime(1:5)./sum(totalTime(1:5));
% 
% figure;
% 
% subplot(1, 2, 1)
% bar(totalTime/60)
% title('Total Time')
% set(gca, 'XTick', 1:6, 'XTickLabel', {'1'; '2'; '3'; '4'; 'REM'; 'Wake'})
% ylabel('Minutes')
% xlim([.5, 6.5])
% 
% subplot(1, 2, 2)
% bar(perTime)
% title('Percentage of Sleep')
% set(gca, 'XTick', 1:5, 'XTickLabel', {'1'; '2'; '3'; '4'; 'REM'})
% ylabel('% of sleep')
% xlim([.5, 5.5])